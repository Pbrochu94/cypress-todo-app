{"version":3,"file":"app.bundle.js","mappings":"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","sources":["webpack://todomvc-javascript-es6-webpack/./src/helpers.js","webpack://todomvc-javascript-es6-webpack/./src/view.js","webpack://todomvc-javascript-es6-webpack/./src/controller.js","webpack://todomvc-javascript-es6-webpack/./src/model.js","webpack://todomvc-javascript-es6-webpack/./src/store.js","webpack://todomvc-javascript-es6-webpack/./src/template.js","webpack://todomvc-javascript-es6-webpack/./src/app.js"],"sourcesContent":["export { qs, qsa, $on, $delegate, $parent, remove };\r\n\r\n// Get element(s) by CSS selector:\r\nconst qs = (selector, scope) => {\r\n    return (scope || document).querySelector(selector);\r\n};\r\n\r\nconst qsa = (selector, scope) => {\r\n    return (scope || document).querySelectorAll(selector);\r\n};\r\n\r\n// addEventListener wrapper:\r\nconst $on = (target, type, callback, useCapture) => {\r\n    target.addEventListener(type, callback, !!useCapture);\r\n};\r\n\r\n// Attach a handler to event for all elements that match the selector,\r\n// now or in the future, based on a root element\r\nconst $delegate = (target, selector, type, handler) => {\r\n    // https://developer.mozilla.org/en-US/docs/Web/Events/blur\r\n    const useCapture = type === \"blur\" || type === \"focus\";\r\n    $on(target, type, dispatchEvent, useCapture);\r\n\r\n    function dispatchEvent(event) {\r\n        const targetElement = event.target;\r\n        const potentialElements = qsa(selector, target);\r\n        const hasMatch = Array.prototype.indexOf.call(potentialElements, targetElement) >= 0;\r\n\r\n        if (hasMatch)\r\n            handler.call(targetElement, event);\r\n    }\r\n};\r\n\r\n// Find the element's parent with the given tag name:\r\n// $parent(qs('a'), 'div');\r\nconst $parent = (element, tagName) => {\r\n    if (!element.parentNode)\r\n        return undefined;\r\n\r\n    if (element.parentNode.tagName.toLowerCase() === tagName.toLowerCase())\r\n        return element.parentNode;\r\n\r\n    return $parent(element.parentNode, tagName);\r\n};\r\n\r\n// removes an element from an array\r\n// const x = [1,2,3]\r\n// remove(x, 2)\r\n// x ~== [1,3]\r\nconst remove = (array, thing) => {\r\n    const index = array.indexOf(thing);\r\n    if (index === -1)\r\n        return array;\r\n\r\n    return array.splice(index, 1);\r\n};\r\n\r\n// Allow for looping on nodes by chaining:\r\n// qsa('.foo').forEach(function () {})\r\nNodeList.prototype.forEach = Array.prototype.forEach;\r\n","/* eslint no-invalid-this: 0, complexity:[2, 9] */\r\nimport { qs, qsa, $on, $parent, $delegate } from \"./helpers\";\r\n\r\nconst ENTER_KEY = 13;\r\nconst ESCAPE_KEY = 27;\r\n\r\nconst _setFilter = (currentPage) => {\r\n    qs(\".filters .selected\").className = \"\";\r\n    qs(`.filters [href=\"#/${currentPage}\"]`).className = \"selected\";\r\n};\r\n\r\nconst _elementComplete = (id, completed) => {\r\n    const listItem = qs(`[data-id=\"${id}\"]`);\r\n\r\n    if (!listItem)\r\n        return;\r\n\r\n    listItem.className = completed ? \"completed\" : \"\";\r\n\r\n    // In case it was toggled from an event and not by clicking the checkbox\r\n    qs(\"input\", listItem).checked = completed;\r\n};\r\n\r\nconst _editItem = (id, title) => {\r\n    const listItem = qs(`[data-id=\"${id}\"]`);\r\n\r\n    if (!listItem)\r\n        return;\r\n\r\n    listItem.className = `${listItem.className} editing`;\r\n\r\n    const input = document.createElement(\"input\");\r\n    input.className = \"edit\";\r\n\r\n    listItem.appendChild(input);\r\n    input.focus();\r\n    input.value = title;\r\n};\r\n\r\nconst _editItemDone = (id, title) => {\r\n    const listItem = qs(`[data-id=\"${id}\"]`);\r\n\r\n    if (!listItem)\r\n        return;\r\n\r\n    const input = qs(\"input.edit\", listItem);\r\n    listItem.removeChild(input);\r\n\r\n    listItem.className = listItem.className.replace(\" editing\", \"\");\r\n\r\n    qsa(\"label\", listItem).forEach((label) => {\r\n        label.textContent = title;\r\n    });\r\n};\r\n\r\nconst _itemId = (element) => {\r\n    const li = $parent(element, \"li\");\r\n    return parseInt(li.dataset.id, 10);\r\n};\r\n\r\nconst _removeItem = (id, list) => {\r\n    const elem = qs(`[data-id=\"${id}\"]`);\r\n\r\n    if (elem)\r\n        list.removeChild(elem);\r\n};\r\n\r\n/**\r\n * View that abstracts away the browser's DOM completely.\r\n * It has two simple entry points:\r\n *\r\n *   - bind(eventName, handler)\r\n *     Takes a todo application event and registers the handler\r\n *   - render(command, parameterObject)\r\n *     Renders the given command with the options\r\n */\r\nexport default class View {\r\n    constructor(template) {\r\n        this.template = template;\r\n\r\n        this.$todoList = qs(\".todo-list\");\r\n        this.$todoItemCounter = qs(\".todo-count\");\r\n        this.$clearCompleted = qs(\".clear-completed\");\r\n        this.$main = qs(\".main\");\r\n        this.$footer = qs(\".footer\");\r\n        this.$toggleAllInput = qs(\".toggle-all\");\r\n        this.$toggleAll = qs(\".toggle-all-label\");\r\n        this.$newTodo = qs(\".new-todo\");\r\n\r\n        this.render = this.render.bind(this);\r\n        this.bindCallback = this.bindCallback.bind(this);\r\n    }\r\n\r\n    _clearCompletedButton(completedCount, visible) {\r\n        this.$clearCompleted.innerHTML = this.template.clearCompletedButton(completedCount);\r\n        this.$clearCompleted.style.display = visible ? \"block\" : \"none\";\r\n    }\r\n\r\n    // eslint-disable-next-line complexity\r\n    render(viewCmd, parameter) {\r\n        switch (viewCmd) {\r\n            case \"showEntries\":\r\n                this.$todoList.innerHTML = this.template.show(parameter);\r\n                break;\r\n            case \"updateElementCount\":\r\n                this.$todoItemCounter.innerHTML = this.template.itemCounter(parameter);\r\n                break;\r\n            case \"contentBlockVisibility\":\r\n                this.$main.style.display = this.$footer.style.display = parameter.visible ? \"block\" : \"none\";\r\n                break;\r\n            case \"toggleAll\":\r\n                this.$toggleAllInput.checked = parameter.checked;\r\n                break;\r\n            case \"clearNewTodo\":\r\n                this.$newTodo.value = \"\";\r\n                break;\r\n            case \"removeItem\":\r\n                _removeItem(parameter, this.$todoList);\r\n                break;\r\n            case \"setFilter\":\r\n                _setFilter(parameter);\r\n                break;\r\n            case \"elementComplete\":\r\n                _elementComplete(parameter.id, parameter.completed);\r\n                break;\r\n            case \"editItem\":\r\n                _editItem(parameter.id, parameter.title);\r\n                break;\r\n            case \"editItemDone\":\r\n                _editItemDone(parameter.id, parameter.title);\r\n                break;\r\n            case \"clearCompletedButton\":\r\n                this._clearCompletedButton(parameter.completed, parameter.visible, this.clearCompletedButton);\r\n                break;\r\n        }\r\n    }\r\n\r\n    bindCallback(event, handler) {\r\n        switch (event) {\r\n            case \"newTodo\":\r\n                $on(this.$newTodo, \"change\", () => handler(this.$newTodo.value));\r\n                break;\r\n            case \"removeCompleted\":\r\n                $on(this.$clearCompleted, \"click\", handler);\r\n                break;\r\n            case \"toggleAll\":\r\n                $on(this.$toggleAll, \"click\", () => {\r\n                    this.$toggleAllInput.click();\r\n                    handler({ completed: this.$toggleAllInput.checked });\r\n                });\r\n                break;\r\n            case \"itemEdit\":\r\n                $delegate(this.$todoList, \"li label\", \"dblclick\", (e) => handler({ id: _itemId(e.target) }));\r\n                break;\r\n            case \"itemRemove\":\r\n                $delegate(this.$todoList, \".destroy\", \"click\", (e) => handler({ id: _itemId(e.target) }));\r\n                break;\r\n            case \"itemToggle\":\r\n                $delegate(this.$todoList, \".toggle\", \"click\", (e) => handler({ id: _itemId(e.target), completed: e.target.checked }));\r\n                break;\r\n            case \"itemEditDone\":\r\n                $delegate(this.$todoList, \"li .edit\", \"blur\", function (e) {\r\n                    if (!e.target.dataset.iscanceled) {\r\n                        handler({\r\n                            id: _itemId(e.target),\r\n                            title: e.target.value,\r\n                        });\r\n                    }\r\n                });\r\n                $delegate(this.$todoList, \"li .edit\", \"keypress\", function (e) {\r\n                    if (e.keyCode === ENTER_KEY)\r\n                        e.target.blur();\r\n                });\r\n                break;\r\n            case \"itemEditCancel\":\r\n                $delegate(this.$todoList, \"li .edit\", \"keyup\", (e) => {\r\n                    if (e.keyCode === ESCAPE_KEY) {\r\n                        e.target.dataset.iscanceled = true;\r\n                        e.target.blur();\r\n                        handler({ id: _itemId(e.target) });\r\n                    }\r\n                });\r\n                break;\r\n        }\r\n    }\r\n}\r\n","class Controller {\r\n    /**\r\n     * Take a model & view, then act as controller between them\r\n     * @param  {object} model The model instance\r\n     * @param  {object} view  The view instance\r\n     */\r\n    constructor(model, view) {\r\n        this.model = model;\r\n        this.view = view;\r\n\r\n        this.view.bindCallback(\"newTodo\", (title) => this.addItem(title));\r\n        this.view.bindCallback(\"itemEdit\", (item) => this.editItem(item.id));\r\n        this.view.bindCallback(\"itemEditDone\", (item) => this.editItemSave(item.id, item.title));\r\n        this.view.bindCallback(\"itemEditCancel\", (item) => this.editItemCancel(item.id));\r\n        this.view.bindCallback(\"itemRemove\", (item) => this.removeItem(item.id));\r\n        this.view.bindCallback(\"itemToggle\", (item) => this.toggleComplete(item.id, item.completed));\r\n        this.view.bindCallback(\"removeCompleted\", () => this.removeCompletedItems());\r\n        this.view.bindCallback(\"toggleAll\", (status) => this.toggleAll(status.completed));\r\n    }\r\n\r\n    /**\r\n     * Load & Initialize the view\r\n     * @param {string}  '' | 'active' | 'completed'\r\n     */\r\n    setView(hash) {\r\n        const route = hash.split(\"/\")[1];\r\n        const page = route || \"\";\r\n        this._updateFilter(page);\r\n    }\r\n\r\n    /**\r\n     * Event fires on load. Gets all items & displays them\r\n     */\r\n    showAll() {\r\n        this.model.read((data) => this.view.render(\"showEntries\", data));\r\n    }\r\n\r\n    /**\r\n     * Renders all active tasks\r\n     */\r\n    showActive() {\r\n        this.model.read({ completed: false }, (data) => this.view.render(\"showEntries\", data));\r\n    }\r\n\r\n    /**\r\n     * Renders all completed tasks\r\n     */\r\n    showCompleted() {\r\n        this.model.read({ completed: true }, (data) => this.view.render(\"showEntries\", data));\r\n    }\r\n\r\n    /**\r\n     * An event to fire whenever you want to add an item. Simply pass in the event\r\n     * object and it'll handle the DOM insertion and saving of the new item.\r\n     */\r\n    addItem(title) {\r\n        if (title.trim() === \"\")\r\n            return;\r\n\r\n        this.model.create(title, () => {\r\n            this.view.render(\"clearNewTodo\");\r\n            this._filter(true);\r\n        });\r\n    }\r\n\r\n    /*\r\n     * Triggers the item editing mode.\r\n     */\r\n    editItem(id) {\r\n        this.model.read(id, (data) => {\r\n            let title = data[0].title;\r\n            this.view.render(\"editItem\", { id, title });\r\n        });\r\n    }\r\n\r\n    /*\r\n     * Finishes the item editing mode successfully.\r\n     */\r\n    editItemSave(id, title) {\r\n        title = title.trim();\r\n\r\n        if (title.length !== 0) {\r\n            this.model.update(id, { title }, () => {\r\n                this.view.render(\"editItemDone\", { id, title });\r\n            });\r\n        } else {\r\n            this.removeItem(id);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Cancels the item editing mode.\r\n     */\r\n    editItemCancel(id) {\r\n        this.model.read(id, (data) => {\r\n            const title = data[0].title;\r\n            this.view.render(\"editItemDone\", { id, title });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Find the DOM element with given ID,\r\n     * Then remove it from DOM & Storage\r\n     */\r\n    removeItem(id) {\r\n        this.model.remove(id, () => this.view.render(\"removeItem\", id));\r\n        this._filter();\r\n    }\r\n\r\n    /**\r\n     * Will remove all completed items from the DOM and storage.\r\n     */\r\n    removeCompletedItems() {\r\n        this.model.read({ completed: true }, (data) => {\r\n            for (let item of data)\r\n                this.removeItem(item.id);\r\n        });\r\n\r\n        this._filter();\r\n    }\r\n\r\n    /**\r\n     * Give it an ID of a model and a checkbox and it will update the item\r\n     * in storage based on the checkbox's state.\r\n     *\r\n     * @param {number} id The ID of the element to complete or uncomplete\r\n     * @param {object} checkbox The checkbox to check the state of complete\r\n     *                          or not\r\n     * @param {boolean|undefined} silent Prevent re-filtering the todo items\r\n     */\r\n    toggleComplete(id, completed, silent) {\r\n        this.model.update(id, { completed }, () => {\r\n            this.view.render(\"elementComplete\", { id, completed });\r\n        });\r\n\r\n        if (!silent)\r\n            this._filter();\r\n    }\r\n\r\n    /**\r\n     * Will toggle ALL checkboxes' on/off state and completeness of models.\r\n     * Just pass in the event object.\r\n     */\r\n    toggleAll(completed) {\r\n        this.model.read({ completed: !completed }, (data) => {\r\n            for (let item of data)\r\n                this.toggleComplete(item.id, completed, true);\r\n        });\r\n\r\n        this._filter();\r\n    }\r\n\r\n    /**\r\n     * Updates the pieces of the page which change depending on the remaining\r\n     * number of todos.\r\n     */\r\n    _updateCount() {\r\n        this.model.getCount((todos) => {\r\n            const completed = todos.completed;\r\n            const visible = completed > 0;\r\n            const checked = completed === todos.total;\r\n\r\n            this.view.render(\"updateElementCount\", todos.active);\r\n            this.view.render(\"clearCompletedButton\", { completed, visible });\r\n            this.view.render(\"toggleAll\", { checked });\r\n            this.view.render(\"contentBlockVisibility\", { visible: todos.total > 0 });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Re-filters the todo items, based on the active route.\r\n     * @param {boolean|undefined} force  forces a re-painting of todo items.\r\n     */\r\n    _filter(force) {\r\n        const active = this._activeRoute;\r\n        const activeRoute = active.charAt(0).toUpperCase() + active.substr(1);\r\n\r\n        // Update the elements on the page, which change with each completed todo\r\n        this._updateCount();\r\n\r\n        // If the last active route isn't \"All\", or we're switching routes, we\r\n        // re-create the todo item elements, calling:\r\n        //   this.show[All|Active|Completed]()\r\n        if (force || this._lastActiveRoute !== \"All\" || this._lastActiveRoute !== activeRoute)\r\n            this[`show${activeRoute}`]();\r\n\r\n        this._lastActiveRoute = activeRoute;\r\n    }\r\n\r\n    /**\r\n     * Simply updates the filter nav's selected states\r\n     */\r\n    _updateFilter(currentPage) {\r\n        // Store a reference to the active route, allowing us to re-filter todo\r\n        // items as they are marked complete or incomplete.\r\n        this._activeRoute = currentPage;\r\n\r\n        if (currentPage === \"\")\r\n            this._activeRoute = \"All\";\r\n\r\n        this._filter();\r\n\r\n        this.view.render(\"setFilter\", currentPage);\r\n    }\r\n}\r\n\r\nexport default Controller;\r\n","/**\r\n * Creates a new Model instance and hooks up the storage.\r\n * @constructor\r\n * @param {object} storage A reference to the client side storage class\r\n */\r\nclass Model {\r\n    constructor(storage) {\r\n        this.storage = storage;\r\n    }\r\n\r\n    /**\r\n     * Creates a new todo model\r\n     *\r\n     * @param {string} [title] The title of the task\r\n     * @param {function} [callback] The callback to fire after the model is created\r\n     */\r\n    create(title, callback) {\r\n        title = title || \"\";\r\n\r\n        const newItem = {\r\n            title: title.trim(),\r\n            completed: false,\r\n        };\r\n\r\n        this.storage.save(newItem, callback);\r\n    }\r\n\r\n    /**\r\n     * Finds and returns a model in storage. If no query is given it'll simply\r\n     * return everything. If you pass in a string or number it'll look that up as\r\n     * the ID of the model to find. Lastly, you can pass it an object to match\r\n     * against.\r\n     *\r\n     * @param {string|number|object} [query] A query to match models against\r\n     * @param {function} [callback] The callback to fire after the model is found\r\n     *\r\n     * @example\r\n     * model.read(1, func) // Will find the model with an ID of 1\r\n     * model.read('1') // Same as above\r\n     * //Below will find a model with foo equalling bar and hello equalling world.\r\n     * model.read({ foo: 'bar', hello: 'world' })\r\n     */\r\n    read(query, callback) {\r\n        const queryType = typeof query;\r\n\r\n        if (queryType === \"function\") {\r\n            callback = query;\r\n            this.storage.findAll(callback);\r\n        } else if (queryType === \"string\" || queryType === \"number\") {\r\n            query = parseInt(query, 10);\r\n            this.storage.find({ id: query }, callback);\r\n        } else {\r\n            this.storage.find(query, callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates a model by giving it an ID, data to update, and a callback to fire when\r\n     * the update is complete.\r\n     *\r\n     * @param {number} id The id of the model to update\r\n     * @param {object} data The properties to update and their new value\r\n     * @param {function} callback The callback to fire when the update is complete.\r\n     */\r\n    update(id, data, callback) {\r\n        this.storage.save(data, callback, id);\r\n    }\r\n\r\n    /**\r\n     * Removes a model from storage\r\n     *\r\n     * @param {number} id The ID of the model to remove\r\n     * @param {function} callback The callback to fire when the removal is complete.\r\n     */\r\n    remove(id, callback) {\r\n        this.storage.remove(id, callback);\r\n    }\r\n\r\n    /**\r\n     * WARNING: Will remove ALL data from storage.\r\n     *\r\n     * @param {function} callback The callback to fire when the storage is wiped.\r\n     */\r\n    removeAll(callback) {\r\n        this.storage.drop(callback);\r\n    }\r\n\r\n    /**\r\n     * Returns a count of all todos\r\n     */\r\n    getCount(callback) {\r\n        if (!callback)\r\n            return;\r\n\r\n        const stats = {\r\n            active: 0,\r\n            completed: 0,\r\n            total: 0,\r\n        };\r\n\r\n        this.storage.findAll((data) => {\r\n            for (let todo of data) {\r\n                if (todo.completed)\r\n                    stats.completed++;\r\n                else\r\n                    stats.active++;\r\n\r\n                stats.total++;\r\n            }\r\n\r\n            callback(stats);\r\n        });\r\n    }\r\n}\r\n\r\nexport default Model;\r\n","let uniqueID = 1;\r\n/* HOT MODULE SPECIFIC\r\n * Since hot reload blows away class instances, storage object is\r\n * moved outside of the class.\r\n */\r\nlet memoryStorage = {};\r\n\r\n/**\r\n * Creates a new client side storage object and will create an empty\r\n * collection if no collection already exists.\r\n *\r\n * @param {string} name The name of our DB we want to use\r\n * @param {function} callback Our fake DB uses callbacks because in\r\n * real life you probably would be making AJAX calls\r\n */\r\nexport class Store {\r\n    constructor(name, callback) {\r\n        this._dbName = name;\r\n\r\n        if (!memoryStorage[name]) {\r\n            const data = {\r\n                todos: [],\r\n            };\r\n\r\n            memoryStorage[name] = JSON.stringify(data);\r\n        }\r\n\r\n        if (callback)\r\n            callback(JSON.parse(memoryStorage[name]));\r\n    }\r\n\r\n    /**\r\n     * Finds items based on a query given as a JS object\r\n     *\r\n     * @param {object} query The query to match against (i.e. {foo: 'bar'})\r\n     * @param {function} callback   The callback to fire when the query has\r\n     * completed running\r\n     *\r\n     * @example\r\n     * db.find({foo: 'bar', hello: 'world'}, function (data) {\r\n     *   // data will return any items that have foo: bar and\r\n     *   // hello: world in their properties\r\n     * })\r\n     */\r\n    find(query, callback) {\r\n        if (!callback)\r\n            return;\r\n\r\n        const { todos } = JSON.parse(memoryStorage[this._dbName]);\r\n\r\n        callback(\r\n            todos.filter((todo) => {\r\n                for (let q in query) {\r\n                    if (query[q] !== todo[q])\r\n                        return false;\r\n                }\r\n\r\n                return true;\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Will retrieve all data from the collection\r\n     *\r\n     * @param {function} callback The callback to fire upon retrieving data\r\n     */\r\n    findAll(callback) {\r\n        if (!callback)\r\n            return;\r\n\r\n        callback(JSON.parse(memoryStorage[this._dbName]).todos);\r\n    }\r\n\r\n    /**\r\n     * Will save the given data to the DB. If no item exists it will create a new\r\n     * item, otherwise it'll simply update an existing item's properties\r\n     *\r\n     * @param {object} updateData The data to save back into the DB\r\n     * @param {function} callback The callback to fire after saving\r\n     * @param {number} id An optional param to enter an ID of an item to update\r\n     */\r\n    save(updateData, callback, id) {\r\n        const data = JSON.parse(memoryStorage[this._dbName]);\r\n        const { todos } = data;\r\n\r\n        // If an ID was actually given, find the item and update each property\r\n        if (id) {\r\n            for (let i = 0; i < todos.length; i++) {\r\n                if (todos[i].id === id) {\r\n                    for (let key in updateData)\r\n                        todos[i][key] = updateData[key];\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n            memoryStorage[this._dbName] = JSON.stringify(data);\r\n\r\n            if (callback)\r\n                callback(JSON.parse(memoryStorage[this._dbName]).todos);\r\n        } else {\r\n            // Generate an ID\r\n            updateData.id = uniqueID++;\r\n\r\n            todos.push(updateData);\r\n            memoryStorage[this._dbName] = JSON.stringify(data);\r\n\r\n            if (callback)\r\n                callback([updateData]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Will remove an item from the Store based on its ID\r\n     *\r\n     * @param {number} id The ID of the item you want to remove\r\n     * @param {function} callback The callback to fire after saving\r\n     */\r\n    remove(id, callback) {\r\n        const data = JSON.parse(memoryStorage[this._dbName]);\r\n        const { todos } = data;\r\n\r\n        for (let i = 0; i < todos.length; i++) {\r\n            if (todos[i].id === id) {\r\n                todos.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n\r\n        memoryStorage[this._dbName] = JSON.stringify(data);\r\n\r\n        if (callback)\r\n            callback(JSON.parse(memoryStorage[this._dbName]).todos);\r\n    }\r\n\r\n    /**\r\n     * Will drop all storage and start fresh\r\n     *\r\n     * @param {function} callback The callback to fire after dropping the data\r\n     */\r\n    drop(callback) {\r\n        memoryStorage[this._dbName] = JSON.stringify({ todos: [] });\r\n\r\n        if (callback)\r\n            callback(JSON.parse(memoryStorage[this._dbName]).todos);\r\n    }\r\n}\r\n\r\nexport default Store;\r\n","\"use strict\";\r\n\r\nconst htmlEscapes = {\r\n    \"&\": \"&amp\",\r\n    \"<\": \"&lt\",\r\n    \">\": \"&gt\",\r\n    '\"': \"&quot\",\r\n    \"'\": \"&#x27\",\r\n    \"`\": \"&#x60\",\r\n};\r\n\r\nconst reUnescapedHtml = /[&<>\"'`]/g;\r\nconst reHasUnescapedHtml = new RegExp(reUnescapedHtml.source);\r\n\r\nconst escape = (str) => str && reHasUnescapedHtml.test(str) ? str.replace(reUnescapedHtml, escapeHtmlChar) : str;\r\nconst escapeHtmlChar = (chr) => htmlEscapes[chr];\r\n\r\nconst createTodoItem = ({ id, title, completed, checked, index }) => `\r\n<li data-id=\"${id}\" class=\"${completed}\">\r\n    <div class=\"view\">\r\n        <input class=\"toggle\" type=\"checkbox\" ${checked}>\r\n        <label>${title}</label>\r\n        <button class=\"destroy\"></button>\r\n    </div>\r\n</li>\r\n`;\r\n\r\nclass Template {\r\n    /**\r\n     * Creates an <li> HTML string and returns it for placement in your app.\r\n     *\r\n     * NOTE: In real life you should be using a templating engine such as Mustache\r\n     * or Handlebars, however, this is a vanilla JS example.\r\n     *\r\n     * @param {object} data The object containing keys you want to find in the\r\n     *                      template to replace.\r\n     * @returns {string} HTML String of an <li> element\r\n     *\r\n     * @example\r\n     * view.show({\r\n     *  id: 1,\r\n     *  title: \"Hello World\",\r\n     *  completed: 0,\r\n     * })\r\n     */\r\n    show(data) {\r\n        let view = \"\";\r\n\r\n        data.reverse().forEach((item, index) => {\r\n            view += createTodoItem({\r\n                id: item.id,\r\n                title: escape(item.title),\r\n                completed: item.completed ? \"completed\" : \"\",\r\n                checked: item.completed ? \"checked\" : \"\",\r\n                index: index,\r\n            });\r\n        });\r\n\r\n        return view;\r\n    }\r\n\r\n    /**\r\n     * Displays a counter of how many to dos are left to complete\r\n     *\r\n     * @param {number} activeTodos The number of active todos.\r\n     * @returns {string} String containing the count\r\n     */\r\n    itemCounter(activeTodos) {\r\n        const plural = activeTodos === 1 ? \"\" : \"s\";\r\n        return `<strong>${activeTodos}</strong> item${plural} left`;\r\n    }\r\n\r\n    /**\r\n     * Updates the text within the \"Clear completed\" button\r\n     *\r\n     * @param  {[type]} completedTodos The number of completed todos.\r\n     * @returns {string} String containing the count\r\n     */\r\n    clearCompletedButton(completedTodos) {\r\n        return completedTodos > 0 ? \"Clear completed\" : \"\";\r\n    }\r\n}\r\n\r\nexport default Template;\r\n","import View from \"./view\";\r\nimport Controller from \"./controller\";\r\nimport Model from \"./model\";\r\nimport Store from \"./store\";\r\nimport Template from \"./template\";\r\n\r\nimport \"todomvc-app-css/index.css\";\r\nimport \"todomvc-common/base.css\";\r\nimport \"./app.css\";\r\n\r\nlet todo;\r\nconst onHashChange = () => {\r\n    todo.controller.setView(document.location.hash);\r\n};\r\n\r\nconst onLoad = () => {\r\n    todo = new Todo(\"javascript-es6-webpack\");\r\n    onHashChange();\r\n};\r\n\r\nfunction Todo(name) {\r\n    this.storage = new Store(name);\r\n    this.model = new Model(this.storage);\r\n    this.template = new Template();\r\n    this.view = new View(this.template);\r\n    this.controller = new Controller(this.model, this.view);\r\n}\r\n\r\n/* HOT MODULE SPECIFIC */\r\nif (module.hot) {\r\n    module.hot.accept(function (err) {});\r\n    if (document.readyState === \"complete\")\r\n        onLoad();\r\n}\r\n\r\nwindow.addEventListener(\"load\", onLoad);\r\nwindow.addEventListener(\"hashchange\", onHashChange);\r\n"],"names":["qs","selector","scope","document","querySelector","qsa","querySelectorAll","$on","target","type","callback","useCapture","addEventListener","$delegate","handler","event","targetElement","potentialElements","Array","prototype","indexOf","call","$parent","element","tagName","parentNode","toLowerCase","NodeList","forEach","_itemId","li","parseInt","dataset","id","View","constructor","template","this","$todoList","$todoItemCounter","$clearCompleted","$main","$footer","$toggleAllInput","$toggleAll","$newTodo","render","bind","bindCallback","_clearCompletedButton","completedCount","visible","innerHTML","clearCompletedButton","style","display","viewCmd","parameter","show","itemCounter","checked","value","list","elem","removeChild","_removeItem","currentPage","className","completed","listItem","_elementComplete","title","input","createElement","appendChild","focus","_editItem","replace","label","textContent","_editItemDone","click","e","iscanceled","keyCode","blur","model","view","addItem","item","editItem","editItemSave","editItemCancel","removeItem","toggleComplete","removeCompletedItems","status","toggleAll","setView","hash","page","split","_updateFilter","showAll","read","data","showActive","showCompleted","trim","create","_filter","length","update","remove","silent","_updateCount","getCount","todos","total","active","force","_activeRoute","activeRoute","charAt","toUpperCase","substr","_lastActiveRoute","storage","newItem","save","query","queryType","findAll","find","removeAll","drop","stats","todo","uniqueID","memoryStorage","name","_dbName","JSON","stringify","parse","filter","q","updateData","i","key","push","splice","htmlEscapes","reUnescapedHtml","reHasUnescapedHtml","RegExp","source","escapeHtmlChar","chr","reverse","index","str","createTodoItem","test","activeTodos","completedTodos","onHashChange","controller","location","Todo","window"],"sourceRoot":""}